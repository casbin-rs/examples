name: Check Code

on:
  pull_request:
  push:
    branches:
      - '*'
      - '!staging.tmp'
    tags:
      - '*'

jobs:
  test:
    name: "Test"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
    - name: "Checkout Repository"
      uses: actions/checkout@v2
      
    - name: "Use Rust stable"
      uses: actions-rs/toolchain@v1
      with:
          toolchain: stable
          profile: minimal
  
    - name: "Check rust_cache"
      uses: Swatinem/rust-cache@v1
      with:
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
  
    - name: Generate test secret key
      shell: sh
      run: |
        mv src/secret.key.sample src/secret.key
      working-directory: actix-middleware-example

    - name: "Print Rust Version"
      run: |
        rustc -Vv
        cargo -Vv
    
    - name: "Build"
      run: |
        cargo check --all
        cargo build --verbose
        cargo test --all --no-fail-fast

  check_formatting:
    name: "Check Formatting"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
  
    steps:
    - name: "Checkout Repository"
      uses: actions/checkout@v2

    - name: "Use the latest Rust stable with rustfmt"
      uses: actions-rs/toolchain@v1
      with:
          toolchain: stable
          profile: minimal
          components: rustfmt
          override: true
    - run: cargo fmt --all -- --check

  check_clippy:
    name: "Check Clippy"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
    - name: "Checkout Repository"
      uses: actions/checkout@v2

    - name: Generate test secret key
      shell: sh
      run: |
        mv src/secret.key.sample src/secret.key
      working-directory: actix-middleware-example

    - name: "Use the latest Rust stable with clippy"
      uses: actions-rs/toolchain@v1
      with:
          toolchain: stable
          profile: minimal
          components: clippy
          override: true
    - run: cargo clippy -- -D warnings